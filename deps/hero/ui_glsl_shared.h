#ifndef _HERO_UI_GLSL_SHARED_H_
#define _HERO_UI_GLSL_SHARED_H_

#include "core_glsl_shared.h"

#define HERO_UI_AABBS_CAP 1024
#define HERO_UI_CIRCLES_CAP 1024
#define HERO_UI_COLORS_CAP 1024
#define HERO_UI_TEXTURES_CAP 16

#define HERO_UI_GLOBALS_BINDING_UBO         0

#define HERO_UI_MATERIAL_BINDING_COLOR_UBO  0
#define HERO_UI_MATERIAL_BINDING_AABB_UBO   1
#define HERO_UI_MATERIAL_BINDING_CIRCLE_UBO 2
#define HERO_UI_MATERIAL_BINDING_TEXTURES   3

#define HeroUIDrawCmdType U32
#define HERO_UI_DRAW_CMD_TYPE_AABB                   0
#define HERO_UI_DRAW_CMD_TYPE_AABB_BORDER            1
#define HERO_UI_DRAW_CMD_TYPE_IMAGE                  2
#define HERO_UI_DRAW_CMD_TYPE_IMAGE_GRAYSCALE_REMAP  3
#define HERO_UI_DRAW_CMD_TYPE_CIRCLE                 4
#define HERO_UI_DRAW_CMD_TYPE_CIRCLE_BORDER          5

#define HeroUIDrawAux U32

#define HERO_UI_DRAW_AUX_TYPE_BITS_SHIFT 0
#define HERO_UI_DRAW_AUX_TYPE_BITS_SIZE  4
#define HERO_UI_DRAW_AUX_TYPE(aux) hero_bitfield_extract_u32(aux, HERO_UI_DRAW_AUX_TYPE_BITS_SHIFT, HERO_UI_DRAW_AUX_TYPE_BITS_SIZE)
#define HERO_UI_DRAW_AUX_TYPE_SET(aux_ptr, value) hero_bitfield_insert_u32(aux_ptr, value, HERO_UI_DRAW_AUX_TYPE_BITS_SHIFT, HERO_UI_DRAW_AUX_TYPE_BITS_SIZE)

#define HERO_UI_DRAW_AUX_TEXTURE_IDX_BITS_SHIFT 4
#define HERO_UI_DRAW_AUX_TEXTURE_IDX_BITS_SIZE  4
#define HERO_UI_DRAW_AUX_TEXTURE_IDX(aux) hero_bitfield_extract_u32(aux, HERO_UI_DRAW_AUX_TEXTURE_IDX_BITS_SHIFT, HERO_UI_DRAW_AUX_TEXTURE_IDX_BITS_SIZE)
#define HERO_UI_DRAW_AUX_TEXTURE_IDX_SET(aux_ptr, value) hero_bitfield_insert_u32(aux_ptr, value, HERO_UI_DRAW_AUX_TEXTURE_IDX_BITS_SHIFT, HERO_UI_DRAW_AUX_TEXTURE_IDX_BITS_SIZE)

//
// we don't have alpha on foreground color
#define HERO_UI_DRAW_AUX_COLOR_FG_BITS_SHIFT 8
#define HERO_UI_DRAW_AUX_COLOR_FG_BITS_SIZE  24
#define HERO_UI_DRAW_AUX_COLOR_FG(aux) hero_bitfield_extract_u32(aux, HERO_UI_DRAW_AUX_COLOR_FG_BITS_SHIFT, HERO_UI_DRAW_AUX_COLOR_FG_BITS_SIZE)
#define HERO_UI_DRAW_AUX_COLOR_FG_SET(aux_ptr, value) hero_bitfield_insert_u32(aux_ptr, value, HERO_UI_DRAW_AUX_COLOR_FG_BITS_SHIFT, HERO_UI_DRAW_AUX_COLOR_FG_BITS_SIZE)

#define HERO_UI_DRAW_AUX_SHAPE_IDX_BITS_SHIFT 4
#define HERO_UI_DRAW_AUX_SHAPE_IDX_BITS_SIZE  12
#define HERO_UI_DRAW_AUX_SHAPE_IDX(aux) hero_bitfield_extract_u32(aux, HERO_UI_DRAW_AUX_SHAPE_IDX_BITS_SHIFT, HERO_UI_DRAW_AUX_SHAPE_IDX_BITS_SIZE)
#define HERO_UI_DRAW_AUX_SHAPE_IDX_SET(aux_ptr, value) hero_bitfield_insert_u32(aux_ptr, value, HERO_UI_DRAW_AUX_SHAPE_IDX_BITS_SHIFT, HERO_UI_DRAW_AUX_SHAPE_IDX_BITS_SIZE)

HERO_UNIFORM_BUFFER(HeroUIGlobalUBO, HERO_GFX_DESCRIPTOR_SET_GLOBAL, HERO_UI_GLOBALS_BINDING_UBO) {
	Mat4x4 mvp;
HERO_UNIFORM_BUFFER_END(global_ubo);

HERO_UNIFORM_BUFFER(HeroUIColorUBO, HERO_GFX_DESCRIPTOR_SET_MATERIAL, HERO_UI_MATERIAL_BINDING_COLOR_UBO) {
	UVec4 colors[HERO_UI_COLORS_CAP / 4];
};

HERO_UNIFORM_BUFFER(HeroUIAabbUBO, HERO_GFX_DESCRIPTOR_SET_MATERIAL, HERO_UI_MATERIAL_BINDING_AABB_UBO) {
	Vec4 aabbs[HERO_UI_AABBS_CAP];
};

HERO_UNIFORM_BUFFER(HeroUICircleUBO, HERO_GFX_DESCRIPTOR_SET_MATERIAL, HERO_UI_MATERIAL_BINDING_CIRCLE_UBO) {
	Vec4 circle_positions[HERO_UI_CIRCLES_CAP / 2];
};

#ifdef HERO_GLSL
layout(set = HERO_GFX_DESCRIPTOR_SET_MATERIAL, binding = HERO_UI_MATERIAL_BINDING_TEXTURES) uniform sampler2D u_textures[HERO_UI_TEXTURES_CAP];
#endif

#endif // _HERO_UI_GLSL_SHARED_H_

